package com.gustavo.basic;

/**
 * dbw 到 W 的对应关系,但是为了取整，将W的数乘以100
 * 比如0dbw = 1w， 0.01dbw = 1.02w,  0.02dbw = 1.04w
 * 这个表示dbw 到w的对应关系，但是如果我有一个dbm的值，我能不能找到对应的w值呢
 * 比如44dbm，其实由于dbm比dbw大30 ， 完全可以通过获取14对应的w值来计算，如表140位置的值为2511
 * 但是也可以通过440位置获取值2511886 更精确
 */
public class DbwTomWConverter {
    private static final int[] gadwPowDbmToMwTab = {
            100, 102, 104, 107, 109, 112, 114, 117, 120, 123,
            125, 128, 131, 134, 138, 141, 144, 147, 151, 154,
            158, 162, 165, 169, 173, 177, 181, 186, 190, 194,
            199, 204, 208, 213, 218, 223, 229, 234, 239, 245,
            251, 257, 263, 269, 275, 281, 288, 295, 301, 309,
            316, 323, 331, 338, 346, 354, 363, 371, 380, 389,
            398, 407, 416, 426, 436, 446, 457, 467, 478, 489,
            501, 512, 524, 537, 549, 562, 575, 588, 602, 616,
            630, 645, 660, 676, 691, 707, 724, 741, 758, 776,
            794, 812, 831, 851, 870, 891, 912, 933, 954, 977,
            1000, 1023, 1047, 1071, 1096, 1122, 1148, 1174, 1202, 1230,
            1258, 1288, 1318, 1348, 1380, 1412, 1445, 1479, 1513, 1548,
            1584, 1621, 1659, 1698, 1737, 1778, 1819, 1862, 1905, 1949,
            1995, 2041, 2089, 2137, 2187, 2238, 2290, 2344, 2398, 2454,
            2511, 2570, 2630, 2691, 2754, 2818, 2884, 2951, 3019, 3090,
            3162, 3235, 3311, 3388, 3467, 3548, 3630, 3715, 3801, 3890,
            3981, 4073, 4168, 4265, 4365, 4466, 4570, 4677, 4786, 4897,
            5011, 5128, 5248, 5370, 5495, 5623, 5754, 5888, 6025, 6165,
            6309, 6456, 6606, 6760, 6918, 7079, 7244, 7413, 7585, 7762,
            7943, 8128, 8317, 8511, 8709, 8912, 9120, 9332, 9549, 9772,
            10000, 10232, 10471, 10715, 10964, 11220, 11481, 11748, 12022, 12302,
            12589, 12882, 13182, 13489, 13803, 14125, 14454, 14791, 15135, 15488,
            15848, 16218, 16595, 16982, 17378, 17782, 18197, 18620, 19054, 19498,
            19952, 20417, 20892, 21379, 21877, 22387, 22908, 23442, 23988, 24547,
            25118, 25703, 26302, 26915, 27542, 28183, 28840, 29512, 30199, 30902,
            31622, 32359, 33113, 33884, 34673, 35481, 36307, 37153, 38018, 38904,
            39810, 40738, 41686, 42657, 43651, 44668, 45708, 46773, 47863, 48977,
            50118, 51286, 52480, 53703, 54954, 56234, 57543, 58884, 60255, 61659,
            63095, 64565, 66069, 67608, 69183, 70794, 72443, 74131, 75857, 77624,
            79432, 81283, 83176, 85113, 87096, 89125, 91201, 93325, 95499, 97723,
            100000, 102329, 104712, 107151, 109647, 112201, 114815, 117489, 120226, 123026,
            125892, 128824, 131825, 134896, 138038, 141253, 144543, 147910, 151356, 154881,
            158489, 162181, 165958, 169824, 173780, 177827, 181970, 186208, 190546, 194984,
            199526, 204173, 208929, 213796, 218776, 223872, 229086, 234422, 239883, 245470,
            251188, 257039, 263026, 269153, 275422, 281838, 288403, 295120, 301995, 309029,
            316227, 323593, 331131, 338844, 346736, 354813, 363078, 371535, 380189, 389045,
            398107, 407380, 416869, 426579, 436515, 446683, 457088, 467735, 478630, 489778,
            501187, 512861, 524807, 537031, 549540, 562341, 575439, 588843, 602559, 616595,
            630957, 645654, 660693, 676082, 691830, 707945, 724435, 741310, 758577, 776247,
            794328, 812830, 831763, 851138, 870963, 891250, 912010, 933254, 954992, 977237,
            1000000, 1023292, 1047128, 1071519, 1096478, 1122018, 1148153, 1174897, 1202264, 1230268,
            1258925, 1288249, 1318256, 1348962, 1380384, 1412537, 1445439, 1479108, 1513561, 1548816,
            1584893, 1621810, 1659586, 1698243, 1737800, 1778279, 1819700, 1862087, 1905460, 1949844,
            1995262, 2041737, 2089296, 2137962, 2187761, 2238721, 2290867, 2344228, 2398832, 2454708,
            2511886, 2570395, 2630268, 2691534, 2754228, 2818382, 2884031, 2951209, 3019951, 3090295,
            3162277, 3235936, 3311311, 3388441, 3467368, 3548133, 3630780, 3715352, 3801894, 3890451,
            3981071, 4073802, 4168693, 4265795, 4365158, 4466835, 4570881, 4677351, 4786300, 4897788,
            5011872, 5128613, 5248074, 5370318, 5495408, 5623413, 5754399, 5888436, 6025595, 6165950,
            6309573, 6456542, 6606934, 6760829, 6918309, 7079457, 7244359, 7413102, 7585775, 7762471,
            7943282, 8128305, 8317637, 8511380, 8709635, 8912509, 9120108, 9332543, 9549925, 9772372,
            10000000, 10232929, 10471285, 10715193, 10964781, 11220184, 11481536, 11748975, 12022644, 12302687,
            12589254, 12882495, 13182567, 13489628, 13803842, 14125375, 14454397, 14791083, 15135612, 15488166,
            15848931
    };

    public static void main(String[] args) {
        System.out.println(gadwPowDbmToMwTab.length);
        int[] arr = new int[521];
        for (int i = 0; i < 521; i++) {
            arr[i] = (int) (100 * Math.pow(10, i / 100d));
        }

        for (int i = 0; i < 521; i++) {
            if (gadwPowDbmToMwTab[i] != arr[i]) {
                System.out.println(i + "--------------");
                System.out.println(gadwPowDbmToMwTab[i]);
                System.out.println(arr[i]);
            }
        }
    }
}
